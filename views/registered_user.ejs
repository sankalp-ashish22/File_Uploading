<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    
    <style>
       @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&display=swap');

:root {
    --light: #f6f6f9;
    --primary: #1976D2;
    --light-primary: #CFE8FF;
    --grey: #eee;
    --dark-grey: #AAAAAA;
    --dark: #363949;
    --danger: #D32F2F;
	--light-danger: #FECDD3;
    --warning: #FBC02D;
    --light-warning: #FFF2C6;
    --success: #388E3C;
    --light-success: #BBF7D0;
}

*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
}

.bx{
    font-size: 1.7rem;
}

a{
    text-decoration: none;
}

li{
    list-style: none;
}

html{
    overflow-x: hidden;
}

body.dark{
    --light: #181a1e;
    --grey: #25252c;
    --dark: #fbfbfb
}

body{
    background: var(--grey);
    overflow-x: hidden;
}

.sidebar{
    position: fixed;
    top: 0;
    left: 0;
    background: var(--light);
    width: 230px;
    height: 100%;
    z-index: 2000;
    overflow-x: hidden;
    scrollbar-width: none;
    transition: all 0.3s ease;
}

.sidebar::-webkit-scrollbar{
    display: none;
}

.sidebar.close{
    width: 60px;
}

.sidebar .logo{
    font-size: 24px;
    font-weight: 700;
    height: 56px;
    display: flex;
    align-items: center;
    color: var(--primary);
    z-index: 500;
    padding-bottom: 20px;
    box-sizing: content-box;
}

.sidebar .logo .logo-name span{
    color: var(--dark);
}

.sidebar .logo .bx{
    min-width: 60px;
    display: flex;
    justify-content: center;
    font-size: 2.2rem;
}

.sidebar .side-menu{
    width: 100%;
    margin-top: 48px;
}

.sidebar .side-menu li{
    height: 48px;
    background: transparent;
    margin-left: 6px;
    border-radius: 48px 0 0 48px;
    padding: 4px;
}

.sidebar .side-menu li.active{
    background: var(--grey);
    position: relative;
}

.sidebar .side-menu li.active::before{
    content: "";
    position: absolute;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    top: -40px;
    right: 0;
    box-shadow: 20px 20px 0 var(--grey);
    z-index: -1;
}

.sidebar .side-menu li.active::after{
    content: "";
    position: absolute;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    bottom: -40px;
    right: 0;
    box-shadow: 20px -20px 0 var(--grey);
    z-index: -1;
}

.sidebar .side-menu li a{
    width: 100%;
    height: 100%;
    background: var(--light);
    display: flex;
    align-items: center;
    border-radius: 48px;
    font-size: 16px;
    color: var(--dark);
    white-space: nowrap;
    overflow-x: hidden;
    transition: all 0.3s ease;
}

.sidebar .side-menu li.active a{
    color: var(--success);
}

.sidebar .toggle-btn {
    /* Toggle button styles */
    cursor: pointer;
}

.sidebar.close .side-menu li a {
    width: calc(48px - (4px * 2)); /* Adjusted width for closed sidebar menu items */
}



.sidebar .side-menu li a .bx{
    min-width: calc(60px - ((4px + 6px) * 2));
    display: flex;
    font-size: 1.6rem;
    justify-content: center;
}

.sidebar .side-menu li a.logout{
    color: var(--danger);
}

.content{
    position: relative;
    width: calc(100% - 230px);
    left: 230px;
    transition: all 0.3s ease;
}

.sidebar.close~.content{
    width: calc(100% - 60px);
    left: 60px;
}

.content nav{
    height: 56px;
    background: var(--light);
    padding: 0 24px 0 0;
    display: flex;
    align-items: center;
    grid-gap: 24px;
    position: sticky;
    top: 0;
    left: 0;
    z-index: 1000;
}

.content nav::before{
    content: "";
    position: absolute;
    width: 40px;
    height: 40px;
    bottom: -40px;
    left: 0;
    border-radius: 50%;
    box-shadow: -20px -20px 0 var(--light);
}

.content nav a{
    color: var(--dark);
}

.content nav .bx.bx-menu{
    cursor: pointer;
    color: var(--dark);
}

.content nav form{
    max-width: 400px;
    width: 100%;
    margin-right: auto;
}

.content nav form .form-input{
    display: flex;
    align-items: center;
    height: 36px;
}

.content nav form .form-input input{
    flex-grow: 1;
    padding: 0 16px;
    height: 100%;
    border: none;
    background: var(--grey);
    border-radius: 36px 0 0 36px;
    outline: none;
    width: 100%;
    color: var(--dark);
}

.content nav form .form-input button{
    width: 80px;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    background: var(--primary);
    color: var(--light);
    font-size: 18px;
    border: none;
    outline: none;
    border-radius: 0 36px 36px 0;
    cursor: pointer;
}

.content nav .notif{
    font-size: 20px;
    position: relative;
}

.content nav .notif .count{
    position: absolute;
    top: -6px;
    right: -6px;
    width: 20px;
    height: 20px;
    background: var(--danger);
    border-radius: 50%;
    color: var(--light);
    border: 2px solid var(--light);
    font-weight: 700;
    font-size: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.content nav .profile img{
    width: 36px;
    height: 36px;
    object-fit: cover;
    border-radius: 50%;
}

.content nav .theme-toggle{
    display: block;
    min-width: 50px;
    height: 25px;
    background: var(--grey);
    cursor: pointer;
    position: relative;
    border-radius: 25px;
}

.content nav .theme-toggle::before{
    content: "";
    position: absolute;
    top: 2px;
    left: 2px;
    bottom: 2px;
    width: calc(25px - 4px);
    background: var(--primary);
    border-radius: 50%;
    transition: all 0.3s ease;
}

.content nav #theme-toggle:checked+.theme-toggle::before{
    left: calc(100% - (25px - 4px) - 2px);
}

.content main{
    width: 100%;
    padding: 36px 24px;
    max-height: calc(100vh - 56px);
}

.content main .header{
    display: flex;
    align-items: center;
    justify-content: space-between;
    grid-gap: 16px;
    flex-wrap: wrap;
}

.content main .header .left h1{
    font-size: 36px;
    font-weight: 600;
    margin-bottom: 10px;
    color: var(--dark);
}

.content main .header .left .breadcrumb{
    display: flex;
    align-items: center;
    grid-gap: 16px;
}

.content main .header .left .breadcrumb li{
    color: var(--dark);
}

.content main .header .left .breadcrumb li a{
    color: var(--dark-grey);
    pointer-events: none;
}

.content main .header .left .breadcrumb li a.active{
    color: var(--primary);
    pointer-events: none;
}

.content main .header .report{
    height: 36px;
    padding: 0 16px;
    border-radius: 36px;
    background: var(--primary);
    color: var(--light);
    display: flex;
    align-items: center;
    justify-content: center;
    grid-gap: 10px;
    font-weight: 500;
}


.content main .data-bottom{
    display: flex;
    flex-wrap: wrap;
    grid-gap: 24px;
    margin-top: 24px;
    width: 100%;
    color: var(--dark);
}

.content main .data-bottom>div{
    border-radius: 20px;
    background: var(--light);
    padding: 24px;
    overflow-x: auto;
}

.content main .data-bottom .header{
    display: flex;
    align-items: center;
    grid-gap: 16px;
    margin-bottom: 24px;
}

.content main .data-bottom .header h3{
    margin-right: auto;
    font-size: 24px;
    font-weight: 600;
}

.content main .data-bottom .header .bx{
    cursor: pointer;
}



@media screen and (max-width: 768px) {
    .sidebar{
        width: 200px;
    }

    .content{
        width: calc(100% - 60px);
        left: 200px;
    }

}

@media screen and (max-width: 576px) {
    
    .content nav form .form-input input{
        display: none;
    }

    .content nav form .form-input button{
        width: auto;
        height: auto;
        background: transparent;
        color: var(--dark);
        border-radius: none;
    }

    .content nav form.show .form-input input{
        display: block;
        width: 100%;
    }

    .content nav form.show .form-input button{
        width: 36px;
        height: 100%;
        color: var(--light);
        background: var(--danger);
        border-radius: 0 36px 36px 0;
    }

    .content nav form.show~.notif, .content nav form.show~.profile{
        display: none;
    }

    .content main .insights {
        grid-template-columns: 1fr;
    }

    .content main .data-bottom .header{
        min-width: 340px;
    }

    .content main .data-bottom .orders table{
        min-width: 340px;
    }

    .content main .data-bottom .reminders .task-list{
        min-width: 340px;
    }

}
.card {
    background-color: var(--light);
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    width: calc(25% - 30px); /* Adjusted width for four cards per row */
    margin-bottom: 30px; /* Bottom margin between rows */
    margin-right: 30px; /* Right margin between columns */
}

.card .card-img-top {
    width: 100%;
    height: 150px;
    object-fit: cover;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
}

.card .card-body {
    padding: 20px;
}

.card .card-title {
    font-size: 1.25rem;
    margin-bottom: 0.75rem;
}

.card .btn-primary {
    background-color: var(--primary);
    color: var(--light);
    border: none;
    padding: 8px 16px;
    font-size: 0.875rem;
    text-decoration: none;
    border-radius: 4px;
    transition: background-color 0.3s ease;
}

.card .btn-primary:hover {
    background-color: #0056b3;
}
.data-bottom {
    display: grid;
    grid-template-columns: repeat(4, 1fr); /* Four columns for 4x4 grid */
    gap: 30px; /* Gap between cards */
    margin-top: -30px; /* Negative margin to counteract bottom margin of cards */
    margin-left: -30px; /* Negative margin to counteract right margin of cards */
}

.container {
    display: flex;
    justify-content: center;
   
}

.data-bottom {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 30px;
    margin-top: -30px; /* Adjusting for the gap */
    margin-left: -15px; /* Adjusting for the gap */
    justify-items: center; /* Center items horizontally */
    
}

.data-bottom .card {
    width: 100%; /* Ensure each card takes full width */
    background-color: var(--light); /* Adjust background color as needed */
    border-radius: 10px; /* Adjust border radius for card */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Add box shadow for depth */
    overflow: hidden; /* Ensure content inside does not overflow */
    /* margin-left: -38px; */
}

.card .card-img-top {
    width: 100%; /* Ensures image fills the entire width of the card */
    height: 150px; /* Fixed height of the image, adjust as per your design */
    object-fit: cover; /* Maintain aspect ratio and cover the entire space */
    border-top-left-radius: 10px; /* Match card border radius */
    border-top-right-radius: 10px; /* Match card border radius */
}

.card .card-body {
    padding: 20px; /* Padding inside the card body */
}

.card .card-title {
    font-size: 1.25rem; /* Adjust card title font size */
    margin-bottom: 0.75rem; /* Bottom margin for title */
}

.card .btn-primary {
    background-color: var(--primary); /* Primary button background color */
    color: var(--light); /* Button text color */
    border: none; /* Remove default button border */
    padding: 8px 16px; /* Padding inside the button */
    font-size: 0.875rem; /* Button font size */
    text-decoration: none; /* Remove underline */
    border-radius: 4px; /* Button border radius */
    transition: background-color 0.3s ease; /* Smooth background transition */
}

.card .btn-primary:hover {
    background-color: #0056b3; /* Darken background color on hover */
}

@media screen and (max-width: 1200px) {
    .data-bottom {
        grid-template-columns: repeat(3, 1fr);
    }
}

@media screen and (max-width: 992px) {
    .data-bottom {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media screen and (max-width: 576px) {
    .data-bottom {
        grid-template-columns: 1fr;
    }
}
#greeting {
    font-family: 'Arial', sans-serif;
    font-size: 30px;
    font-weight: 600;
    color: #264bb0cb;
    text-align: center;

}

.my_name{
    color: #181a1e;
}
.myname-dark{
color:#eee;
}
.profile {
            position: relative;
        }

        .dropdown-menu {
            display: none;
            position: absolute;
            top: 40px; /* Adjust based on your profile image height */
            right: 0;
            background-color: var(--light);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 5px;
            overflow: hidden;
        }

        .dropdown-menu a {
            display: block;
            padding: 10px 20px;
            color: var(--dark);
            text-decoration: none;
            transition: background-color 0.3s;
        }

        .dropdown-menu a:hover {
            background-color: var(--grey);
        }

        .profile:hover .dropdown-menu {
            display: block;
        }

        /* Dark Mode Toggle Styles */
        .theme-toggle {
            display: block;
            width: 50px;
            height: 25px;
            background: var(--grey);
            cursor: pointer;
            position: relative;
            border-radius: 25px;
            transition: background-color 0.3s;
        }

        .theme-toggle::before {
            content: "";
            position: absolute;
            top: 2px;
            left: 2px;
            bottom: 2px;
            width: 21px;
            background: var(--primary);
            border-radius: 50%;
            transition: all 0.3s;
        }

        #theme-toggle:checked + .theme-toggle::before {
            left: calc(100% - 23px);
        }

        /* Dark Mode Styles */
        body.dark {
            --light: #181a1e;
            --grey: #25252c;
            --dark: #fbfbfb;
        }
        .loader-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent black background */
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999; /* Ensure it's above other content */
    opacity: 0; /* Initially hidden */
    pointer-events: none; /* Prevent interaction when hidden */
    transition: opacity 0.3s ease; /* Smooth transition for visibility */
}

.loader {
    border: 4px solid transparent; /* Transparent border */
    border-top: 4px solid #3498db; /* Blue top border */
    border-bottom: 4px solid #ffffff; /* White bottom border */
    border-radius: 50%; /* Circle shape */
    width: 40px;
    height: 40px;
    animation: spin 0.8s linear infinite; /* Rotation animation */
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

body.loading .loader-container {
    opacity: 1; /* Show loader when body has 'loading' class */
    pointer-events: auto; /* Allow interaction when loader is visible */
}
/* CSS for hover effect on User Information and Total Storage Consumed cards */
.card-hover {
    background-color: var(--light);
    padding: 16px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    margin-bottom: 24px;
}

.card-hover:hover {
    transform: translateY(-5px); /* Move card slightly up on hover */
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2); /* Add shadow on hover */
}

.card-hover:hover .card-title {
    color: var(--primary); /* Change title color on hover */
}

.card-hover:hover .card-text {
    color: var(--dark); /* Change text color on hover */
}

.card-hover .card-title {
    font-size: 18px;
    margin-bottom: 8px;
    color: var(--dark);
}

.card-hover .card-text {
    font-size: 16px;
    color: var(--dark-grey);
}
.card {
    margin-bottom: 10px; /* Adjust the margin between each card */
    border: 1px solid #ccc; /* Example border style for each card */
    border-radius: 5px;
    overflow: hidden; /* Ensures the card content does not overflow */
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.1); /* Example shadow effect */
}

.card-body {
    padding: 8px; /* Adjust the padding inside the card body */
}

.card-title {
    margin-bottom: 5px; /* Optional: Adjust margin below card title */
}

.card-text {
    margin-bottom: 0; /* Remove margin below card text */
}
.card-body {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.user-info {
    flex: 1;
}

.user-actions {
    display: flex;
    align-items: center;
    
}

.user-actions .card-text {
    margin-right: 20px;
}

.btn-success, .btn-danger {
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    color: var(--light);
    text-decoration: none;
    transition: background-color 0.3s ease;
}

.btn-success {
    background: var(--success);
}

.btn-success:hover {
    background: #1c7206;
}

.btn-danger {
    background: var(--danger);
}

.btn-danger:hover {
    background: #b2102f;
}
.equal-btn {
    display: inline-flex; /* Use flexbox to ensure equal dimensions */
    align-items: center; /* Center items vertically */
    justify-content: center; /* Center items horizontally */
    height: 38px; /* Adjust height as needed */
    padding: 0 15px; /* Adjust padding as needed */
}


/* Modal CSS */
.modal {
    display: none; /* Hidden by default */
    position: fixed; /* Stay in place */
    z-index: 1; /* Sit on top */
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto; /* Enable scrolling if needed */
    background-color: rgba(0,0,0,0.5); /* Black w/ opacity */
    margin-left: 100px;
}

.modal-content {
    background-color: #fefefe;
    margin: 10% auto; /* 10% from the top and centered */
    padding: 20px;
    border: 1px solid #888;
    width: 80%; /* Could be more or less, depending on screen size */
    max-width: 600px; /* Max width of modal */
    border-radius: 10px; /* Rounded corners */
    box-shadow: 0 4px 8px rgba(0,0,0,0.2); /* Box shadow */
}

.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.close:hover,
.close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}

.modal-content h2 {
    margin-top: 0; /* Remove default margin */
}

.blog-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 20px; /* Add space between blog items */
}

.blog-item h3 {
    font-weight: normal; /* Ensure titles are not bold */
}

.blog-item p {
    flex-grow: 1;
    margin: 0;
}

.blog-item hr {
    width: 100%; /* Ensure the hr spans the full width */
    margin: 10px 0; /* Margin above and below each horizontal line */
    border: none;
    border-top: 1px solid #ddd; /* Gray line */
}

.icons {
    display: flex;
    gap: 10px;
}

.icons i {
    cursor: pointer;
    font-size: 18px;
    color: #555;
}

.icons i.bx-trash:hover {
    color: red;
}

.icons i.bx-show:hover {
    color: rgb(9, 160, 12);
}


.color_blue{
    color:#0056b3
}


    </style>
    <title>Homepage</title>
</head>

<body class="loading">
    <div class="loader-container">
        <div class="loader"></div>
    </div>
    
    <!-- Sidebar -->
    <div class="sidebar">
        <a href="#" class="logo">
            <i class='bx bx-cloud-upload bx-fade-up-hover'></i>
            <div class="logo-name"><span>File</span>Upload</div>
        </a>
        <ul class="side-menu">
            <li class="active"><a href="#"><i class='bx bx-group'></i>User info</a></li>
            <li><a href="/admin/Homepage"><i class='bx bxs-dashboard'></i>Dashboard</a></li>
            <li><a href="#"><i class='bx bx-line-chart'></i>UserCount - <%=userCount%></a></li>
            <li><a href="#"><i class='bx bx-task'></i>FileCount - <%=blogCount%></a></li>
            

            <!-- <li><a href="#"><i class='bx bx-message-square-dots'></i>Tickets</a></li>
            <li><a href="#"><i class='bx bx-group'></i>Users</a></li>
            <li><a href="#"><i class='bx bx-cog'></i>Settings</a></li> -->
        </ul>
        <ul class="side-menu">
            <li>
                <a href="/user/logout" class="logout">
                    <i class='bx bx-log-out-circle'></i>
                    Logout
                </a>
            </li>
        </ul>
    </div>
    <!-- End of Sidebar -->

    <!-- Main Content -->
    <div class="content">
        <!-- Navbar -->
        <nav>
            <div class="toggle-btn" >
                <i class='bx bx-menu'></i>
            </div>
            
            <form action="#">
                <div class="form-input">
                    <input type="search" id="searchInput" placeholder="Search...">
                    <button class="search-btn" type="submit"><i class='bx bx-search'></i></button>
                </div>
            </form>
            <input type="checkbox" id="theme-toggle" hidden>
            <label for="theme-toggle" class="theme-toggle"></label>
            <a href="#" class="notif">
                <i class='bx bx-group'></i>
                <span class="count"><%=userCount%></span>
            </a>
            <a href="#" class="notif">
                <i class='bx bx-task'></i>
                <span class="count"><%=blogCount%></span>
            </a>
            <div class="profile">
                <img src="https://th.bing.com/th/id/OIP._pjSPwMiy9sHkBDPvTYTNQHaHa?w=512&h=512&rs=1&pid=ImgDetMain">
                <div class="dropdown-menu">
                    <!-- <a href="/user/change-profile-picture">Change Picture</a> -->
                    <a href="/user/logout">Logout</a>
                </div>
            </div>
        </nav>

        <!-- End of Navbar -->

        <main>
            <div class="header">
                <div class="left">
                    <h1 id="greeting">Greetings, <i id="myname" class="my_name">Admin User</i></h1>
                    <ul class="breadcrumb">
                        <li><a href="#"><subheading h2><i>Dive into your data</i></h2></a></li>
                    </ul>
                </div>
              
            </div>
<!-- Modal Structure -->
<div id="userBlogsModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>User <span class="color_blue">Files</span></h2>
        <hr> <!-- Horizontal line after heading -->
        <div id="userBlogsContainer">
            <!-- Blog entries will be dynamically added here -->
        </div>
    </div>
</div>





            <div id="registeredUsers" class="data-bottom">
                <!-- User cards go here -->
                <% users.forEach(user => { %>
                    <div class="card mb-3">
                        <div class="card-body d-flex justify-content-between align-items-center">
                            <div class="user-info" style="flex: 1;">
                                <h5 class="card-title"><%= user.fullName %></h5>
                                <p class="card-text" style="display: inline; margin-right: 20px;">Email: <%= user.email %></p>
                            </div>
                            <div class="user-actions" style="white-space: nowrap;">
                                <a href="#" class="btn btn-success equal-btn" onclick="viewUserBlogs('<%= user._id %>')"><i class="fas fa-eye"></i> View</a>
                                <span style="margin-left: 10px;"></span>
                                <a href="#" class="btn btn-danger equal-btn" onclick="deleteUser('<%= user._id %>')"><i class="fas fa-trash"></i> Delete</a>
                            </div>
                            
                            
                            
                        </div>
                    </div>
                <% }); %>
            </div>
            

            
            
            
            
            
            
            
        
            
        </main>
        
        

    </div>
    <script>
        // JavaScript Code (index.js)


 // JavaScript Code for Theme Toggle
 document.addEventListener('DOMContentLoaded', () => {
            const themeToggle = document.getElementById('theme-toggle');
            const body = document.body;
            const Greeter_name = document.getElementById("myname");
          

            if (localStorage.getItem('theme') === 'dark') {
                body.classList.add('dark');
             
                Greeter_name.classList.remove('my_name');
                Greeter_name.classList.add('myname-dark');
            
                themeToggle.checked = true;
            }

            themeToggle.addEventListener('change', () => {
                if (themeToggle.checked) {
                    body.classList.add('dark');
                  
                    Greeter_name.classList.remove('my_name');
                    Greeter_name.classList.add('myname-dark');
                    localStorage.setItem('theme', 'dark');
                } else {
                    body.classList.remove('dark');
                
                    Greeter_name.classList.remove('myname-dark');
                    Greeter_name.classList.add('my_name');
                    localStorage.setItem('theme', 'light');
                }
            });
        });
        document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('searchInput');
    const cards = document.querySelectorAll('.card'); // Assuming each blog is represented as a card

    searchInput.addEventListener('input', () => {
        const searchText = searchInput.value.trim().toLowerCase();

        cards.forEach(card => {
            const title = card.querySelector('.card-title').textContent.toLowerCase();
            if (title.includes(searchText)) {
                card.style.display = 'block'; // Show the card if the title matches
            } else {
                card.style.display = 'none'; // Hide the card if the title doesn't match
            }
        });
    });

    // Optional: Handle form submission (prevent default behavior)
    const searchForm = document.getElementById('searchForm');
    searchForm.addEventListener('submit', (event) => {
        event.preventDefault(); // Prevent form submission
    });
});

    document.addEventListener('DOMContentLoaded', () => {
        const body = document.body;

        // Remove 'loading' class after window load (simulated delay for demo)
        window.addEventListener('load', () => {
            body.classList.remove('loading');
        });

        // Optional: Simulate a delay (e.g., 3 seconds) for demonstration
        setTimeout(() => {
            body.classList.remove('loading');
        }, 3000);
    });

    function deleteUser(userId) {
        if (confirm("Are you sure you want to delete this user and their blogs?")) {
            fetch(`/admin/registered_user/${userId}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (response.ok) {
                    // Reload the page or update UI as needed
                    window.location.reload();
                } else {
                    throw new Error('Failed to delete user and blogs');
                }
            })
            .catch(error => {
                console.error('Error deleting user:', error);
                // Handle error scenario
                alert('Failed to delete user and blogs');
            });
        }
    }
  const modal = document.getElementById('userBlogsModal');

        // Get the <span> element that closes the modal
        const closeBtn = modal.querySelector('.close');

        // Function to open modal and fetch user blogs
        function viewUserBlogs(userId) {
            fetch(`/admin/registered_user/${userId}/blogs`)
                .then(response => response.json())
                .then(data => {
                    const userBlogsContainer = document.getElementById('userBlogsContainer');
                    userBlogsContainer.innerHTML = ''; // Clear previous content
                    data.forEach(blog => {
                        const blogDiv = document.createElement('div');
                        blogDiv.classList.add('blog-item');
                        blogDiv.setAttribute('data-id', blog._id);

                        const titleElement = document.createElement('h3');
                        titleElement.textContent = blog.title;

                        const contentElement = document.createElement('p');
                        contentElement.textContent = blog.content;

                        const iconsDiv = document.createElement('div');
                        iconsDiv.classList.add('icons');

                        const viewIcon = document.createElement('i');
                        viewIcon.classList.add('bx', 'bx-show'); // Boxicons class for eye icon
                        viewIcon.setAttribute('title', 'View');
                        viewIcon.addEventListener('click', () => downloadBlog(blog._id)); // Adjust function name as needed

                        const deleteIcon = document.createElement('i');
                        deleteIcon.classList.add('bx', 'bx-trash'); // Boxicons class for trash icon
                        deleteIcon.setAttribute('title', 'Delete');
                        deleteIcon.addEventListener('click', () => deleteBlog(blog._id)); // Adjust function name as needed

                        // Append icons to the icons div
                        iconsDiv.appendChild(viewIcon);
                        iconsDiv.appendChild(deleteIcon);

                        // Append elements to blogDiv
                        blogDiv.appendChild(titleElement);
                        blogDiv.appendChild(contentElement);
                        blogDiv.appendChild(iconsDiv);

                        // Append blogDiv to container
                        userBlogsContainer.appendChild(blogDiv);

                        const hr = document.createElement('hr'); // Create a <hr> element
                        userBlogsContainer.appendChild(hr); // Append the <hr> after the blogDiv
                    });
                    modal.style.display = 'block'; // Display the modal
                })
                .catch(error => {
                    console.error('Error fetching user blogs:', error);
                    alert('Failed to fetch user blogs');
                });
        }

        // Function to close the modal when clicking on <span> (x)
        closeBtn.onclick = function() {
            modal.style.display = 'none';
        }

        // Close the modal if user clicks outside of it
        window.onclick = function(event) {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        }

        // Function to download a blog
        function downloadBlog(blogId) {
            
            // Redirect to the specific blog page
    window.location.href = `/admin/registered_user/${blogId}`;
        }

        // Function to delete a blog
        function deleteBlog(blogId) {
            fetch(`/blog/${blogId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (response.ok) {
                    // Remove the blog entry from the modal
                    const blogItem = document.querySelector(`.blog-item[data-id='${blogId}']`);
                    if (blogItem) {
                        blogItem.nextElementSibling.remove(); // Remove the <hr> element
                        blogItem.remove(); // Remove the blog item itself
                    }
                } else {
                    console.error('Error deleting blog:', response.statusText);
                    alert('Failed to delete blog');
                }
            })
            .catch(error => {
                console.error('Error deleting blog:', error);
                alert('Failed to delete blog');
            });
        }





    </script>
    <script src="index.js"></script>
</body>

</html>
